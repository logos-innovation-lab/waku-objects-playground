/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers'
import type { SplitterFactory, SplitterFactoryInterface } from '../SplitterFactory'

const _abi = [
	{
		inputs: [],
		stateMutability: 'nonpayable',
		type: 'constructor',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: 'address',
				name: 'addr',
				type: 'address',
			},
			{
				indexed: false,
				internalType: 'bytes',
				name: '_metadata',
				type: 'bytes',
			},
			{
				indexed: false,
				internalType: 'contract ERC20',
				name: '_token',
				type: 'address',
			},
			{
				indexed: false,
				internalType: 'address[]',
				name: '_members',
				type: 'address[]',
			},
		],
		name: 'SplitterCreated',
		type: 'event',
	},
	{
		inputs: [
			{
				internalType: 'bytes',
				name: '_metadata',
				type: 'bytes',
			},
			{
				internalType: 'contract ERC20',
				name: '_token',
				type: 'address',
			},
			{
				internalType: 'address[]',
				name: '_members',
				type: 'address[]',
			},
		],
		name: 'create',
		outputs: [
			{
				internalType: 'contract Splitter',
				name: 'splitter',
				type: 'address',
			},
		],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'masterSplitter',
		outputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
] as const

export class SplitterFactory__factory {
	static readonly abi = _abi
	static createInterface(): SplitterFactoryInterface {
		return new Interface(_abi) as SplitterFactoryInterface
	}
	static connect(address: string, runner?: ContractRunner | null): SplitterFactory {
		return new Contract(address, _abi, runner) as unknown as SplitterFactory
	}
}
