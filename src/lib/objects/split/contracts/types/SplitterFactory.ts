/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BytesLike,
	FunctionFragment,
	Result,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from 'ethers'
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
	TypedContractMethod,
} from './common'

export interface SplitterFactoryInterface extends Interface {
	getFunction(nameOrSignature: 'create' | 'masterSplitter'): FunctionFragment

	getEvent(nameOrSignatureOrTopic: 'SplitterCreated'): EventFragment

	encodeFunctionData(
		functionFragment: 'create',
		values: [BytesLike, AddressLike, AddressLike[]],
	): string
	encodeFunctionData(functionFragment: 'masterSplitter', values?: undefined): string

	decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'masterSplitter', data: BytesLike): Result
}

export namespace SplitterCreatedEvent {
	export type InputTuple = [
		addr: AddressLike,
		_metadata: BytesLike,
		_token: AddressLike,
		_members: AddressLike[],
	]
	export type OutputTuple = [addr: string, _metadata: string, _token: string, _members: string[]]
	export interface OutputObject {
		addr: string
		_metadata: string
		_token: string
		_members: string[]
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
	export type Filter = TypedDeferredTopicFilter<Event>
	export type Log = TypedEventLog<Event>
	export type LogDescription = TypedLogDescription<Event>
}

export interface SplitterFactory extends BaseContract {
	connect(runner?: ContractRunner | null): SplitterFactory
	waitForDeployment(): Promise<this>

	interface: SplitterFactoryInterface

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEventLog<TCEvent>>>
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEventLog<TCEvent>>>

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>,
	): Promise<this>
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>,
	): Promise<this>

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>,
	): Promise<this>
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>,
	): Promise<this>

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent,
	): Promise<Array<TypedListener<TCEvent>>>
	listeners(eventName?: string): Promise<Array<Listener>>
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

	create: TypedContractMethod<
		[_metadata: BytesLike, _token: AddressLike, _members: AddressLike[]],
		[string],
		'nonpayable'
	>

	masterSplitter: TypedContractMethod<[], [string], 'view'>

	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

	getFunction(
		nameOrSignature: 'create',
	): TypedContractMethod<
		[_metadata: BytesLike, _token: AddressLike, _members: AddressLike[]],
		[string],
		'nonpayable'
	>
	getFunction(nameOrSignature: 'masterSplitter'): TypedContractMethod<[], [string], 'view'>

	getEvent(
		key: 'SplitterCreated',
	): TypedContractEvent<
		SplitterCreatedEvent.InputTuple,
		SplitterCreatedEvent.OutputTuple,
		SplitterCreatedEvent.OutputObject
	>

	filters: {
		'SplitterCreated(address,bytes,address,address[])': TypedContractEvent<
			SplitterCreatedEvent.InputTuple,
			SplitterCreatedEvent.OutputTuple,
			SplitterCreatedEvent.OutputObject
		>
		SplitterCreated: TypedContractEvent<
			SplitterCreatedEvent.InputTuple,
			SplitterCreatedEvent.OutputTuple,
			SplitterCreatedEvent.OutputObject
		>
	}
}
